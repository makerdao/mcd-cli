#!/usr/bin/env bash
### mcd-gem -- Collateral management
### Usage: mcd --ilk=<id> [--urn=<address>] gem [<command>]
###
### Commands: gem name               Gem name e.g Wrapped Ether
###           gem symbol             Gem id e.g WETH
###           gem decimals           Number of decimals in gem
###           gem balance            Print balances for a given urn (default: ETH_FROM)
###           gem join <amt>         Add collateral to an urn
###           gem exit <amt> [<guy>] Remove collateral from an urn
###
### Example:  mcd --ilk=ETH-A gem balance
###           mcd --ilk=ETH-A gem join 42
set -e

mcd-gem() {
cat <<.
Gem: Governance-approved collateral tokens

$(mcd ilks)

$(mcd gem help)
.
}

if [[ -n "$1" ]] && [[ "$1" != "help"  ]]; then
  mcd --require-ilk
fi

case $1 in
  adapter)
    ilk=$(tr '-' '_' <<<"$MCD_ILK")
    eval echo "\$MCD_JOIN_$ilk"
  ;;
  gem|address)
    gem=$(seth call "$(mcd gem adapter)" 'gem()')
    seth --abi-decode 'f()(address)' "$gem"
  ;;
  name)
    mcd ilks | sed -n "/$MCD_ILK/p" | awk '{$1=$2=$3=""; print $0}' | sed 's/^ *//g'
  ;;
  symbol)
    mcd ilks | sed -n "/$MCD_ILK/p" | awk '{print $2}'
  ;;
  decimals)
    mcd ilks | sed -n "/$MCD_ILK/p" | awk '{print $3}'
  ;;
  balance)
    mcd-gem-balance "$2";
  ;;
  supply)
    ilk=$(mcd --get-ilk)
    case $2 in
      mcd) { mcd gem-supply; };;
      ext) { mcd gem-supply-ext; };;
      "")   {
        exec 3< <(mcd gem supply mcd)
        exec 4< <(mcd gem supply ext)
        echo "mcd $(cat <&3) Total system balance ($MCD_ILK)"
        echo "ext $(cat <&4) Total supply ($MCD_ILK)"
      };;
      *)   { mcd gem supply; };;
    esac
  ;;
  join) mcd gem-join "$2"; ;;
  exit) mcd gem-exit "$2"; ;;
    "") mcd-gem;         ;;
     *) mcd help gem;    ;;
esac
